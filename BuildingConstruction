// Assets/Scripts/BuildingConstruction.cs
using UnityEngine;
using System.Collections; // Required for IEnumerator and Coroutines

public class BuildingConstruction : MonoBehaviour
{
    private float constructionTimeRemaining;
    private GameObject finalBuildingPrefab;
    private bool isUnderConstruction = false;

    // This method is called from BuildingPlacementManager.PlaceBuilding
    // It takes the total construction time and the prefab to swap to when finished.
    public void StartConstruction(float time, GameObject finalPrefab)
    {
        if (isUnderConstruction)
        {
            Debug.LogWarning($"{gameObject.name} is already under construction.");
            return; // Prevent starting construction multiple times
        }

        constructionTimeRemaining = time;
        finalBuildingPrefab = finalPrefab;
        isUnderConstruction = true;

        // Optionally: Visual indication for being under construction
        // For example, you might make the initial prefab transparent, or swap to a construction-specific model.
        // For now, we'll assume the 'initialConstructionPrefab' (from BuildingData)
        // is already meant to be the 'under construction' visual.

        StartCoroutine(ConstructBuildingProcess());
        Debug.Log($"{gameObject.name} started construction. Will finish in {time:F2} seconds.");
    }

    private IEnumerator ConstructBuildingProcess()
    {
        while (constructionTimeRemaining > 0)
        {
            constructionTimeRemaining -= Time.deltaTime;
            // You could update a UI progress bar here if you had one
            yield return null; // Wait for the next frame
        }

        // Ensure time doesn't go negative
        constructionTimeRemaining = 0;
        isUnderConstruction = false;

        Debug.Log($"{gameObject.name} construction finished!");

        // Replace with final prefab if one is provided
        if (finalBuildingPrefab != null)
        {
            // Instantiate the final building at the same position and rotation
            // Make it a child of the same parent for scene hierarchy cleanliness
            GameObject finalBuilding = Instantiate(finalBuildingPrefab, transform.position, transform.rotation, transform.parent);

            // Optional: Copy additional properties or components if needed
            // e.g., health, inventory components if they are on the initial prefab
            // You might want to handle this more robustly if initial and final prefabs vary greatly.

            // Destroy the temporary construction object (this GameObject)
            Destroy(gameObject);
            Debug.Log($"Replaced with final prefab: {finalBuilding.name}.");
        }
        else
        {
            // If no final prefab, this object IS the final building.
            // Just enable its colliders and make it fully opaque if it was transparent for construction.
            Collider buildingCollider = GetComponent<Collider>();
            if (buildingCollider != null)
            {
                buildingCollider.enabled = true; // Enable collider once construction is done
            }
            // Add any other "finished" state logic here (e.g., enable scripts, change materials)
            Debug.Log($"{gameObject.name} is now complete (no final prefab to swap to).");
        }
    }
}
