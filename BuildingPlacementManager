using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI; // Required for Button component
using System.Collections.Generic;
using System.Linq; // Required for Min() and Max() extension methods

public class BuildingPlacementManager : MonoBehaviour
{
    // Singleton instance for easy access from other scripts
    public static BuildingPlacementManager Instance { get; private set; }

    [Header("Placement Settings")]
    [Tooltip("LayerMask for terrain/ground where buildings can be placed.")]
    public LayerMask placementLayerMask;
    [Tooltip("Speed of building rotation when using Q and E keys (degrees per second).")]
    public float rotationSpeed = 90f;
    public float maxPlacementDistance = 100f; // Max distance for raycast from mouse
    [Tooltip("How high above the calculated base point to start the downward terrain raycasts.")]
    public float terrainRaycastStartHeight = 5f; // Ensures ray starts above any terrain bumps

    [Header("Input Keys")]
    [Tooltip("The key to rotate the building counter-clockwise.")]
    public KeyCode rotateLeftKey = KeyCode.Q; // Default to Q
    [Tooltip("The key to rotate the building clockwise.")]
    public KeyCode rotateRightKey = KeyCode.E; // Default to E
    [Tooltip("The key to hold for 45-degree rotation snapping.")]
    public KeyCode snapRotationModifierKey = KeyCode.LeftShift; // Default to Left Shift
    [Tooltip("The key to cancel the current building placement.")]
    public KeyCode cancelPlacementKey = KeyCode.Escape; // Default to Escape

    [Header("Building Data & Visuals")]
    [Tooltip("Assign all your BuildingData ScriptableObjects here. Order should correspond to UI buttons.")]
    public BuildingData[] availableBuildings;
    public Material validPlacementMaterial; // Green transparent material for valid preview
    public Material invalidPlacementMaterial; // Red transparent material for invalid preview

    [Header("UI References")]
    [Tooltip("Assign your main UI buttons here. Order should correspond to 'Available Buildings' array.")]
    public Button[] buildingButtons;
    [Tooltip("Drag and drop the UI Panel containing buttons for placement options (Single, Line, Box, etc.).")]
    [SerializeField] private GameObject placementSelectionPanel; // Assign this in Inspector

    [Header("Placement Mode Scripts")]
    [Tooltip("Reference to the SinglePlacementMode component on this or another GameObject.")]
    [SerializeField] private SinglePlacementMode singlePlacementMode;
    [Tooltip("Reference to the LinePlacementMode component on this or another GameObject.")]
    [SerializeField] private LinePlacementMode linePlacementMode;
    // Add more references to other placement mode scripts here as you create them

    private BuildingData selectedBuildingData; // The BuildingData currently selected for potential placement
    private BasePlacementMode activePlacementMode; // The currently active placement mode script

    // Property to check if any placement mode is active (for camera system)
    public bool IsPlacingBuilding => activePlacementMode != null;

    void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
        }
        else
        {
            Instance = this;
        }

        // Ensure placement modes are disabled initially
        if (singlePlacementMode != null) singlePlacementMode.enabled = false;
        if (linePlacementMode != null) linePlacementMode.enabled = false;
        // ... disable other modes
    }

    void Start()
    {
        // Hook up UI buttons to select buildings based on BuildingData
        for (int i = 0; i < buildingButtons.Length; i++)
        {
            if (i < availableBuildings.Length && availableBuildings[i] != null)
            {
                int dataIndex = i;
                buildingButtons[i].onClick.AddListener(() => SelectBuildingType(availableBuildings[dataIndex]));

                Text buttonText = buildingButtons[i].GetComponentInChildren<Text>();
                if (buttonText != null)
                    buttonText.text = availableBuildings[dataIndex].buildingName;

                Image buttonImage = buildingButtons[i].image;
                if (buttonImage != null && availableBuildings[dataIndex].buildingIcon != null)
                    buttonImage.sprite = availableBuildings[dataIndex].buildingIcon;
            }
            else
            {
                Debug.LogWarning($"Button at index {i} ('{buildingButtons[i].name}') has no corresponding BuildingData assigned or index out of bounds in 'availableBuildings' array.");
            }
        }

        // Hide the placement selection panel at start
        if (placementSelectionPanel != null)
        {
            placementSelectionPanel.SetActive(false);
        }
        ShowMainBuildingButtons(true); // Ensure main buttons are visible initially
    }

    void Update()
    {
        // If a placement mode is active, tell it to update its logic
        if (activePlacementMode != null)
        {
            activePlacementMode.UpdateMode();
        }

        // Key to cancel placement (configurable in Inspector)
        if (Input.GetKeyDown(cancelPlacementKey)) 
        {
            CancelPlacement();
        }
    }

    // Called by UI buttons (e.g., the main building selection buttons)
    public void SelectBuildingType(BuildingData buildingData)
    {
        if (buildingData == null)
        {
            Debug.LogError("Attempted to select a null BuildingData.");
            return;
        }
        if (buildingData.initialConstructionPrefab == null)
        {
            Debug.LogError($"BuildingData for '{buildingData.buildingName}' is missing 'initialConstructionPrefab'. Cannot select.");
            return;
        }

        // If a building was already selected, and it's the same type, cancel current.
        // Otherwise, clear previous selection and prepare for new.
        if (selectedBuildingData == buildingData && activePlacementMode != null)
        {
            CancelPlacement(); // Clicking same button twice cancels
        }
        else
        {
            // First, cancel any existing active placement mode (this will also hide the panel)
            CancelPlacement(); 

            selectedBuildingData = buildingData;
            Debug.Log($"Building type selected: {selectedBuildingData.buildingName}");

            // --- NOW, ALWAYS SHOW THE PLACEMENT SELECTION PANEL ---
            ShowPlacementSelectionPanel(true);

            // --- THEN, CHECK FOR AND ACTIVATE DEFAULT PLACEMENT METHOD ---
            bool defaultMethodActivated = false;
            switch (selectedBuildingData.defaultPlacementMethod)
            {
                case BuildingPlacementMethodType.Single:
                    if (selectedBuildingData.allowSinglePlacement)
                    {
                        // Activate the mode. The panel remains visible because StartPlacementMode no longer hides it.
                        StartPlacementMode(singlePlacementMode); 
                        defaultMethodActivated = true;
                    }
                    break;
                case BuildingPlacementMethodType.Line:
                    if (selectedBuildingData.allowLinePlacement)
                    {
                        // Activate the mode. The panel remains visible.
                        StartPlacementMode(linePlacementMode); 
                        defaultMethodActivated = true;
                    }
                    break;
                // Add cases for other default placement types here (e.g., Box, Custom1)
                default:
                    // No default method specified or allowed, panel remains visible for user choice
                    break;
            }

            if (defaultMethodActivated)
            {
                Debug.Log($"Default placement method ({selectedBuildingData.defaultPlacementMethod}) auto-activated for {selectedBuildingData.buildingName}. Panel remains visible for choice.");
            }
            else
            {
                Debug.Log($"No default placement method for {selectedBuildingData.buildingName}. Please select a method from the panel.");
            }
        }
    }

    // Called by buttons on the 'placementSelectionPanel'
    public void SelectSinglePlacement()
    {
        if (selectedBuildingData == null || !selectedBuildingData.allowSinglePlacement)
        {
            Debug.LogWarning("Single placement not allowed or no building selected.");
            return;
        }
        
        // Manual selection: Activate the mode. The panel remains visible.
        StartPlacementMode(singlePlacementMode); 
    }

    public void SelectLinePlacement()
    {
        if (selectedBuildingData == null || !selectedBuildingData.allowLinePlacement)
        {
            Debug.LogWarning("Line placement not allowed or no building selected.");
            return;
        }

        // Manual selection: Activate the mode. The panel remains visible.
        StartPlacementMode(linePlacementMode); 
    }

    // General method to activate a specific placement mode
    // IMPORTANT: This method NO LONGER hides the panel.
    // The panel's visibility is now solely controlled by SelectBuildingType (to show) and CancelPlacement (to hide).
    private void StartPlacementMode(BasePlacementMode mode)
    {
        if (mode == null)
        {
            Debug.LogError($"Attempted to start a null placement mode: {mode.GetType().Name}. Check Inspector assignments.");
            CancelPlacement(); // Fallback to clear state
            return;
        }

        if (activePlacementMode != null)
        {
            activePlacementMode.ExitMode(); // Exit previous mode cleanly
            activePlacementMode.enabled = false;
        }

        activePlacementMode = mode;
        activePlacementMode.enabled = true; // Enable the script component
        activePlacementMode.EnterMode(this, selectedBuildingData); // Initialize the mode
    }


    // Cancels the current placement process, exiting the active mode
    public void CancelPlacement()
    {
        if (activePlacementMode != null)
        {
            activePlacementMode.ExitMode(); // Tell the mode to clean up its preview
            activePlacementMode.enabled = false; // Disable the script component
            activePlacementMode = null; // Clear reference
        }
        selectedBuildingData = null; // Clear the selected building data
        
        // --- ONLY REASON TO HIDE THE PLACEMENT SELECTION PANEL ---
        ShowPlacementSelectionPanel(false); 
        ShowMainBuildingButtons(true); // Show main buttons again

        Debug.Log("Building placement cancelled.");
    }


    // Helper to show/hide the main building selection buttons
    private void ShowMainBuildingButtons(bool show)
    {
        foreach (Button button in buildingButtons)
        {
            if (button != null) button.gameObject.SetActive(show);
        }
    }

    // Helper to show/hide the panel with placement options (Single, Line, etc.)
    private void ShowPlacementSelectionPanel(bool show)
    {
        if (placementSelectionPanel != null)
        {
            placementSelectionPanel.SetActive(show);
        }
    }
}
